name: Selenium with Testing - CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout code
    - name: Checkout Code
      uses: actions/checkout@v3

    # Step 2: Set up JDK 20
    - name: Set up JDK 20
      uses: actions/setup-java@v3
      with:
        java-version: '20'
        distribution: 'temurin'
        cache: maven

    # Step 3: Install Allure CLI
    - name: Install Allure CLI
      run: |
        wget https://github.com/allure-framework/allure2/releases/download/2.24.0/allure-2.24.0.tgz
        tar -zxvf allure-2.24.0.tgz
        sudo mv allure-2.24.0 /opt/allure
        sudo ln -s /opt/allure/bin/allure /usr/bin/allure

    # Step 4: Set BrowserStack Credentials
    - name: Set BrowserStack Credentials
      env:
        BROWSERSTACK_USERNAME: mahmoudsameer_QCshyF
        BROWSERSTACK_ACCESS_KEY: xscrZZa7CFssqgRQgV16
      run: echo "BrowserStack credentials are set successfully."

    # Step 5: Debug File Structure Before Testing
    - name: Debug Project File Structure
      run: |
        echo "Listing project structure:"
        pwd
        ls -R

    # Step 6: Build and Test with Maven on BrowserStack
    - name: Build and Test with Maven
      env:
        BROWSERSTACK_USERNAME: mahmoudsameer_QCshyF
        BROWSERSTACK_ACCESS_KEY: xscrZZa7CFssqgRQgV16
      run: |
        echo "Running tests..."
        mvn clean test || echo "Tests failed, proceeding to generate reports."

    # Step 7: Debug Allure Results Directory
    - name: Debug Allure Results Directory
      run: |
        echo "Checking allure-results directory contents:"
        ls -R allure-results || echo "allure-results directory is missing or empty."

    # Step 8: Ensure Allure Results Directory Exists
    - name: Ensure Allure Results Directory
      run: mkdir -p allure-results

    # Step 9: Generate Allure Report
    - name: Generate Allure Report
      run: |
        echo "Generating Allure Report..."
        allure generate allure-results --clean -o allure-report || echo "Failed to generate Allure Report."
      continue-on-error: true

    # Step 10: Debug Allure Report Directory
    - name: Debug Allure Report Directory
      run: |
        echo "Checking allure-report directory contents:"
        ls -R allure-report || echo "allure-report directory is missing or empty."

    # Step 11: Upload Allure Report as Artifact
    - name: Upload Allure Report as Artifact
      uses: actions/upload-artifact@v3
      with:
        name: allure-report
        path: allure-report

    # Step 12: Zip Allure Results and Report
    - name: Zip Allure Results and Report
      run: |
        echo "Zipping allure-results and allure-report..."
        zip -r allure-report.zip allure-results allure-report || echo "Failed to zip Allure directories."

    # Step 13: Debug Zipped Report
    - name: Debug Zipped Allure Report
      run: |
        echo "Checking allure-report.zip:"
        ls -lh allure-report.zip || echo "Allure report zip is missing."

    # Step 14: Send Allure Report via Email
    - name: Send Allure Report via Email
      uses: dawidd6/action-send-mail@v3
      with:
        connection_url: smtp://smtp.gmail.com:587
        username: mahmoudsameer560@gmail.com
        password: blxi ymqn qjlk jpio
        to: mahmoudsameer560@gmail.com
        from: mahmoudsameer560@gmail.com
        subject: Allure Test Report
        body: |
          Please find the attached Allure Test Report.
        attachments: allure-report.zip

    # Step 15: Debug File Structure After Email
    - name: Debug Project File Structure After Email
      run: |
        echo "Project structure after email step:"
        ls -R

    # Step 16: Clean up Temporary Files
    - name: Clean up Temporary Files
      run: |
        echo "Cleaning up..."
        rm -rf allure-2.24.0.tgz allure-2.24.0 allure-report.zip
